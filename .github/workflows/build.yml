name: Build the package

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.9"]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Python Environment
        uses: ./.github/actions/setup-environment
        id: environment

      - name: Get pipx and poetry latest versions
        id: latest-versions
        shell: bash
        run: |
          pipx_version=$(curl -s https://pypi.org/pypi/pipx/json | jq -r .info.version)
          poetry_version=$(curl -s https://pypi.org/pypi/poetry/json | jq -r .info.version)
          echo "pipx=$pipx_version" >> $GITHUB_OUTPUT
          echo "poetry=$poetry_version" >> $GITHUB_OUTPUT
          echo "PIP_USER: $PIP_USER"

      - uses: actions/cache@v4
        name: Cache pipx
        with:
          path: ${{ steps.environment.outputs.python-user-base }}
          key: >
            ${{ format('pip-user-{0}-{1}-{2}',
            matrix.os,
            matrix.python-version,
            steps.latest-versions.outputs.pipx
            ) }}

      - uses: actions/cache@v4
        name: Cache Poetry
        with:
          path: ${{ steps.environment.outputs.pipx-home }}
          key: >
            ${{ format('pipx-home-{0}-{1}-{2}',
            matrix.os,
            matrix.python-version,
            steps.latest-versions.outputs.poetry
            ) }}

      - name: Install pipx
        run: pip install --user --verbose pipx

      - name: Install or update Poetry
        run: pipx install poetry==${{ steps.latest-versions.outputs.poetry }}

      - name: Use local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v4
        name: Cache Poetry dependencies
        with:
          path: ./.venv
          key: deps-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            deps-${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Install dependencies with Poetry
        run: |
          poetry env use python3
          poetry install

      - name: Check if package builds
        run: |
          poetry build
